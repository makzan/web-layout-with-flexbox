((3) 0 () 68 ("  " "    " "}" "pvKeOb" "Row and column layout" "language-css" "width: 100%;" "width: 25%;" "width: 50%;" "width: 75%;" " " " and " "." "height: 100%;" "flex: 0 1 auto;" "flex: 1;" "Object-fit" "language-markup" "<div class=\"container\">" "      " "        " "</div>" "<fieldset>" "<div class=\"input\">" "</fieldset>" "15336" "result" "makzan" "http://codepen.io/makzan/pen/" "zGKPRb" "Photo credit: Dick Chan." ", " "bronze" "display: flex;" "@for $i from 1 through length($screen-sizes) {" "@media screen and (min-width: nth($breakpoints, $i)){" "<header>" "</header>" "<div class=\"row\">" "<ol>" "</ol>" "          " "<figure>" "<figcaption>This is a placeholder.</figcaption>" "</figure>" "<img src=\"http://placehold.it/300x300\" alt=\"placeholder image\" />" "</main>" "<footer>" "<div class=\"small-12 col\">" "</footer>" "The result of center-aligned item inside the container." ".container {" "margin: auto" "<div class=\"item\">Item.</div>" ".item {" "html, body {" "align-items: center;" "justify-content: center;" "flex-direction: column;" "dopZxX" "$columns-count: 12;" "@media screen {" "@for $i from 1 through $columns-count {" "width: 100%/$columns-count * $i;" "Chapter 0—Preparation" "Thomas Mak" "About Makzan" "http://flexbox.website/material/") () (h ! (equal) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/index.html.pm" . unix) h ! (equal) (doc q root (h1 "Chapter 1—Introducing Flexbox")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/index.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/appendix/object-fit.html.pm" . unix) h ! (equal) (doc c root c (c h1 c (? . 16)) c (c p c "Object-fit provides us " c (q code "cover") c (? . 11) q (code "contain") " control which is similar to " (code "background-size") ". The difference is that background image is a decoration that happens in CSS. Object-fit, on the other hand, applies to <img> tag. An img tag is treated as content and hence it keeps the accessibility.") c (c pre c (c code c (c (c class c (? . 5))) c "figure {" c (u . "\n") c (? . 0) c "padding: 5px;" c (u . "\n\n") c (? . 0) c "img {" c (u . "\n") c (? . 1) c (? . 6) c (u . "\n") c (? . 1) c "height: 200px;" c (u . "\n") c (? . 1) c "object-fit: cover;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c "figcaption {" c (u . "\n") c (? . 1) c "text-align: center;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2))) c (c p c (c (q data-height "700") c (c data-slug-hash c (? . 3)) c (c data-theme-id c (? . 25)) c (c data-default-tab c (? . 26)) c (c data-user c (? . 27))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/pvKeOb"))) c (c string-append c (? . 28) c (? . 3))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/appendix/object-fit.html.pm")) (mod-time . 1432258481)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/row-column-based-layout.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Row-columns-based layout") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/row-column-grid-6113c4d65e2f9513a6603b7999c5adb4.png") c (c alt c (? . 4))))) c (c figcaption c (? . 4)))) c (q p "Before building our Flexbox layout, we revisit the traditional float-based grid layout. One of the easiest approach to implement grid is using the row-columns approach.") c (q h2 ((id "time-for-action")) (a ((href "#time-for-action")) (string-append "Time for Action—" "Build our own minimal float-based grid layout"))) c (q aside "I assumed we have a basic norimalization or CSS reset applied to the page.") c (c ol c (c li c (q p "At first, we define the following rules that prevents our layout broken by box-model or extra-large images.") c (c pre c (c code c (c (c class c (? . 5))) c "/* Border box */" c (u . "\n") c "* {box-sizing: border-box;}" c (u . "\n\n") c "/* Prevent image breaking our layout */" c (u . "\n") q "img {max-width: 100%;}"))) c (c li c (q p "Then we define the basic row-column properties that construct the foundation.") c (c pre c (c code c (c (c class c (? . 5))) c "/* Grid: row */" c (u . "\n") c ".row {" c (u . "\n") c (? . 0) c (? . 6) c (u . "\n") c (? . 0) c "max-width: 600px;" c (u . "\n") c (? . 0) c "margin: 0 auto;" c (u . "\n") c (? . 0) c "padding-top: 10px;" c (u . "\n") c (? . 0) c "padding-bottom: 10px;" c (u . "\n") c (? . 0) c "overflow: auto;" c (u . "\n") c (? . 2) c (u . "\n\n") c "/* Row within column within row */" c (u . "\n") c ".row .row {" c (u . "\n") c (? . 0) c "width: auto;" c (u . "\n") c (? . 0) c "max-width: none;" c (u . "\n") c (? . 0) c "margin: 0 -10px;" c (u . "\n") c (? . 2) c (u . "\n\n") c "/* Grid: column */" c (u . "\n") c ".col {" c (u . "\n") c (? . 0) c "padding: 0 10px;" c (u . "\n") c (? . 0) c "float:left;" c (u . "\n") c (? . 2)))) c (c li c (q p "Mobile first design means that we work on the smallest layout first.") c (q aside "To make the code simpler, I’m using 4-columns in the code example. In production, we may want to use a 12 or 16 columns. Actually we will switch to 12-columns In next step when using Scss to generate our CSS code.") c (c pre c (c code c (c (c class c (? . 5))) c "/* Dividing into columns */" c (u . "\n") c "@media screen  {" c (u . "\n") c (? . 0) c ".small-1 {" c (u . "\n") c (? . 1) c (? . 7) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 0) c ".small-2 {" c (u . "\n") c (? . 1) c (? . 8) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 0) c ".small-3 {" c (u . "\n") c (? . 1) c (? . 9) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 0) c ".small-4 {" c (u . "\n") c (? . 1) c (? . 6) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2)))) c (c li c (q p "After the " (em "small") " layout, we define the " (em "medium") " which overrides the smaller layout configure if presented in the HTML.") c (c pre c (c code c (c (c class c (? . 5))) c "@media screen and (min-width: 600px) {" c (u . "\n") c (? . 0) c ".medium-1 {" c (u . "\n") c (? . 1) c (? . 7) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 0) c ".medium-2 {" c (u . "\n") c (? . 1) c (? . 8) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 0) c ".medium-3 {" c (u . "\n") c (? . 1) c (? . 9) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 0) c ".medium-4 {" c (u . "\n") c (? . 1) c (? . 6) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2)))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/row-column-based-layout.html.pm")) (mod-time . 1432266300)) ((p+ #"/home/ubuntu/workspace/pollen-src/index.ptree" . unix) h ! (equal) (doc q pagetree-root index.html (chapter-0/index.html chapter-0/about-makzan.html chapter-0/contact.html chapter-0/preparing.html) (chapter-1/index.html chapter-1/center-align.html chapter-1/inputs.html chapter-1/container-and-items.html chapter-1/flex-grow-and-shrink.html) (chapter-2/index.html chapter-2/grid-and-block-grid.html chapter-2/mobile-first.html chapter-2/row-column-based-layout.html chapter-2/floating-grid.html) (chapter-3/index.html chapter-3/grid.html) summary.html (appendix/index.html appendix/object-fit.html) log.html) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.ptree")) (mod-time . 1432262413)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-3/index.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Chapter 3—Grid, powered by FlexBox") c (q p "At the end of this chapter, we will complete the following website with a Flexbox grid system that we can reuse in other projects.") c (q p "http://codepen.io/makzan/pen/GJjMEL") c (c h2 c (c (c id c (u . "..."))) c (c a c (c (c href c (u . "#..."))) q "...")) c (c pre c (c code c (c (c class c (? . 5))) c ".small-12 {" c (u . "\n") c (? . 0) c "flex: 0 1 100%;" c (u . "\n") c (? . 2)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-3/index.html.pm")) (mod-time . 1432259017)) ((p+ #"/home/ubuntu/workspace/pollen-src/index.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Building Flexbox website") c (q p "This is the material I originally created for workshop “" (strong "Web Layout with Flexbox") "” at " (em "World Internet Developer Summit 2015") " in Hong Kong.") c (c ol c (c li c (c a c (q (href "/chapter-0/")) c (? . 64))) q (li (a ((href "/chapter-1/")) "Chapter 1—Before Flexbox")) (li (a ((href "/chapter-2")) "Chapter 2—Using Flexbox")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/index.html.pm" . unix) h ! (equal) (doc q root (h1 "Chapter 2—Row–Column grid layout")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/index.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/contact.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Have a chat") c (q p "You may contact me for any kind of questions and sharings. I focus on mobile web and iOS app develompnet. I also built multiplayer interaction with socket server and node.js. I like to learn more.") c (c p c (q small "twitter:") c (? . 10) c (q a ((href "https://twitter.com/makzan")) "@makzan") c (q br) c (q small "website:") c (? . 10) c (q a ((href "http://makzan.net")) "makzan.net") c (q br) c (q small "email:") c (? . 10) c (q a ((href "mailto:mak@makzan.net")) "mak@makzan.net") c (q br) c (q small "work email:") c (? . 10) q (a ((href "mailto:thomas@cpttm.org.mo")) "thomas@cpttm.org.mo")) q (p "Just ping me at any time for a chat.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/contact.html.pm")) (mod-time . 1432258481)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/container-and-items.html.pm" . unix) h ! (equal) (doc q root (h1 "Container and items") (p "We only think of 1 container and it’s direct children at any given moment.") (p "We should only focus on one container and its direct child items. Flexbox is all about the container and how items inside it take the spaces. When dealing with the container-items pair, we don’t care if the item is a container of another set of elements. We just think of 1 container and it’s direct children.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/container-and-items.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/flex-grow-and-shrink.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Flex grow and shrink") c (c p c "When we’re building the grid layout, we need to master another concept of flexbox—" c (q em "grow") c (? . 11) c (q em "shrink") c (? . 12)) c (c h2 c (c (c id c (u . "flex-grow"))) c (c a c (c (c href c (u . "#flex-grow"))) q "flex-grow")) c (c p c "Grow defines how the items expand to takes the extra spaces. Grow affects the items when there are empty spaces in the container. Grow defines the ratio each item should expand. Given value 1 on all items mean each one of them should take equaly width, or height, depends on the " c (q code "flex-direction") c (? . 12)) c (c pre c (c code c (c (c class c (? . 5))) c (? . 15))) c (c h2 c (c (c id c (u . "flex-shrink"))) c (c a c (c (c href c (u . "#flex-shrink"))) q "flex-shrink")) c (q p "Shrink is how each item should squeeze when the container is smaller. Having value 1 on all items means all items shrinks equally.") c (c pre c (c code c (c (c class c (? . 5))) c (? . 14))) c (c h2 c (c (c id c (u . "applying-grow-and-shrink"))) c (c a c (c (c href c (u . "#applying-grow-and-shrink"))) q "Applying grow and shrink")) c (c pre c (c code c (c (c class c (? . 17))) c (? . 18) c (u . "\n") c (? . 0) c (? . 36) c (u . "\n") c (? . 1) c "Header goes here." c (u . "\n") c (? . 0) c (? . 37) c (u . "\n") c (? . 0) c "<main>" c (u . "\n") c (? . 1) c "<p>Main content.</p>" c (u . "\n") c (? . 0) c (? . 46) c (u . "\n") c (? . 0) c (? . 47) c (u . "\n") c (? . 1) c "Footer goes here." c (u . "\n") c (? . 0) c (? . 49) c (u . "\n") c (? . 21))) c (c pre c (c code c (c (c class c (? . 5))) c (? . 55) c (u . "\n") c (? . 0) c (? . 13) c (u . "\n") c (? . 2) c (u . "\n") c (? . 51) c (u . "\n") c (? . 0) c (? . 33) c (u . "\n") c (? . 0) c (? . 58) c (u . "\n") c (? . 0) c (? . 13) c (u . "\n") c (? . 2) c (u . "\n") c "header, footer {" c (u . "\n") c (? . 0) c (? . 14) c (u . "\n") c (? . 2) c (u . "\n") c "main {" c (u . "\n") c (? . 0) c (? . 15) c (u . "\n") c (? . 0) c "overflow: scroll;" c (u . "\n") c (? . 0) c "-webkit-overflow-scrolling:touch;" c (u . "\n") c (? . 2)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/flex-grow-and-shrink.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/mobile-first.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Mobile first design") c (q p "Mobile first means that during our website planning, we plan the content and layout for the mobile first. Planning for mobile first ensures us to consider the most important thing of our website. The screen is so tiny that we have to think clearly what’s important enough to earn a place there. And what is the most important thing that we put it on top of this tiny screen.") c (c p c "In grid system, mobile first means we use the " c (q code "small-*") c " layout modifiers by default. When we need to build a wider layout, we start using the " c (q code "medium-*") c (? . 31) q (code "large-*") " and even " (code "xlarge-*") ". Each one overrides the smaller one.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/mobile-first.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/appendix/index.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Appendix") c (q p "Something that’s not related to Flexbox, but still worth a mention.") c (c ol c (c li c (c a c (q (href "./object-fit.html")) c (? . 16))) q (li (a ((href "./about-pollen.html")) "About pollen")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/appendix/index.html.pm")) (mod-time . 1432258481)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/inputs.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Inputs") c (c pre c (c code c (c (c class c (? . 17))) c (? . 18) c (u . "\n") c (? . 0) c "<form>" c (u . "\n") c (? . 1) c (? . 22) c (u . "\n") c (? . 19) c "<label for=\"twitter-handle\">Twitter:</label>" c (u . "\n") c (? . 19) c (? . 23) c (u . "\n") c (? . 20) c "<span>@</span>" c (u . "\n") c (? . 20) c "<input type=\"text\" id=\"twitter-handle\" placeholder=\"username\" autofocus>" c (u . "\n") c (? . 19) c (? . 21) c (u . "\n") c (? . 1) c (? . 24) c (u . "\n") c (? . 1) c (? . 22) c (u . "\n") c (? . 19) c "<label for=\"twitter-handle\">Create your domain:</label>" c (u . "\n") c (? . 19) c (? . 23) c (u . "\n") c (? . 20) c "<input type=\"text\" id=\"twitter-handle\" placeholder=\"www\">" c (u . "\n") c (? . 20) c "<span>.makzan.net</span>" c (u . "\n") c (? . 19) c (? . 21) c (u . "\n") c (? . 1) c (? . 24) c (u . "\n") c (? . 1) c "<input type=\"submit\" value=\"Done\">" c (u . "\n") c (? . 0) c "</form>" c (u . "\n") c (? . 21))) c (c h2 c (c (c id c (u . "live-demo"))) c (c a c (c (c href c (u . "#live-demo"))) q "Live Demo")) c (c p c (c (q data-height "385") c (c data-slug-hash c (? . 29)) c (c data-theme-id c (? . 25)) c (c data-default-tab c (? . 26)) c (c data-user c (? . 27))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/zGKPRb"))) c (c string-append c (? . 28) c (? . 29))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/inputs.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/about-makzan.html.pm" . unix) h ! (equal) (doc c root c (c h1 c (? . 66)) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/hkbu-sharing-3f407523e22e39c56e436a521adef9e6.jpg") c (c alt c (? . 30))))) c (c figcaption c (? . 30)))) c (c p c "I’m " c (c em c (? . 65)) c ". You’ll also find me on internet as " c (q em "Makzan") c ". I teach know-how via " c (q a ((href "https://www.packtpub.com/game-development/html5-game-development-hotshot")) "books") c (? . 31) c (q a ((href "https://www.packtpub.com/game-development/html5-game-development-video")) "screencasts") c (? . 11) c (q a ((href "http://www.mobiledesignclass.com")) "classes") c (? . 12)) c (q p "I’m now in Macao to help transfering technology knowledge to Macao’s small-medium enterprise. That’s why I’m currently working at CPTTM—Macau Productivity and Technology Transfer Center.") c (c h2 c (c (c id c (u . "macau-productivity-and-technology-transfer-center"))) c (c a c (c (c href c (u . "#macau-productivity-and-technology-transfer-center"))) q "Macau Productivity and Technology Transfer Center")) c (q p "We are the largest IT training center in Macau. We provide training on networking, app development, creative designs, 3D printing and lots more.") c (c p c "We also train students and teenagers to different competitions. For instance, I was the students in 2003 and won the " c (c em c (? . 32)) c " medal of web design in switzerland. I became the trainer from 2009 and brought my students to win the " c (c em c (? . 32)) c (? . 11) q (em "silver") " medal in London and Germany in recent years.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/about-makzan.html.pm")) (mod-time . 1432258481)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-3/grid.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Implementation of the grid") c (q p "It’s very easy to define our " (em "mobile-first grid system") " by using the Scss’s list, loop and variable.") c (c pre c (c code c (c (c class c (? . 5))) c (? . 60) c (u . "\n") c "$screen-sizes: small medium large xlarge xxlarge;" c (u . "\n") c "$breakpoints: 0 500px 1000px 1200px 1600px;" c (u . "\n") c (? . 34) c (u . "\n") c (? . 0) c (? . 35) c (u . "\n") c (? . 1) c ".#{nth($screen-sizes, $i)}-vertical { flex-direction:column; }" c (u . "\n") c (? . 1) c ".#{nth($screen-sizes, $i)}-horizontal { flex-direction:row; }" c (u . "\n") c (? . 1) c ".#{nth($screen-sizes, $i)}-hidden { display: none; }" c (u . "\n") c (? . 1) c ".#{nth($screen-sizes, $i)}-auto   { display: block; flex: 1}" c (u . "\n") c (? . 1) c ".#{nth($screen-sizes, $i)}-shrink { display: block; flex: 0 1 auto}" c (u . "\n") c (? . 1) c "@for $j from 1 through $columns-count {" c (u . "\n") c (? . 19) c ".#{nth($screen-sizes, $i)}-#{$j} {" c (u . "\n") c (? . 20) c "display: block;" c (u . "\n") c (? . 20) c "flex: 0 1 calc( 100% / #{$columns-count} * #{$j} );" c (u . "\n") c (? . 19) c (? . 2) c (u . "\n") c (? . 1) c (? . 2) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2))) c (q h1 "Implementation of block grid") c (c pre c (c code c (c (c class c (? . 5))) c "/* Block grid */" c (u . "\n") c ".block-grid {" c (u . "\n") c (? . 0) c (? . 33) c (u . "\n") c (? . 0) c "flex-wrap: wrap;" c (u . "\n") c (? . 2) c (u . "\n") c ".block-grid > * { flex: 1; }" c (u . "\n") c (? . 34) c (u . "\n") c (? . 0) c (? . 35) c (u . "\n") c (? . 1) c "@for $j from 2 through 10 {" c (u . "\n") c (? . 19) c ".block-grid.#{nth($screen-sizes, $i)}-up-to-#{$j} > * {" c (u . "\n") c (? . 20) c "flex: 0 1 calc( 100% / #{$j} );" c (u . "\n") c (? . 19) c (? . 2) c (u . "\n") c (? . 1) c (? . 2) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2))) c (q h1 "HTML that uses the grid") c (c pre c (c code c (c (c class c (? . 17))) c (? . 36) c (u . "\n") c (? . 0) c (? . 38) c (u . "\n") c (? . 1) c (? . 48) c (u . "\n") c (? . 19) c "<h1>Cake Shop</h1>" c (u . "\n") c (? . 1) c (? . 21) c (u . "\n") c (? . 0) c (? . 21) c (u . "\n") c (? . 37) c (u . "\n") c (? . 38) c (u . "\n") c (? . 0) c "<nav class=\"small-12 medium-shrink xxlarge-2 col\">" c (u . "\n") c (? . 1) c "<ul class=\"block-grid medium-vertical\">" c (u . "\n") c (? . 19) c "<li><a href=\"#\">Home</a></li>" c (u . "\n") c (? . 19) c "<li><a href=\"#\">About</a></li>" c (u . "\n") c (? . 19) c "<li><a href=\"#\">Clients</a></li>" c (u . "\n") c (? . 19) c "<li><a href=\"#\">Contact Us</a></li>" c (u . "\n") c (? . 1) c "</ul>" c (u . "\n") c (? . 0) c "</nav>" c (u . "\n") c (? . 0) c "<aside class=\"small-hidden large-shrink xxlarge-2 col\">" c (u . "\n") c (? . 1) c "<p>Sections</p>" c (u . "\n") c (? . 1) c (? . 39) c (u . "\n") c (? . 19) c "<li><strong>Section 1</strong>" c (u . "\n") c (? . 20) c (? . 39) c (u . "\n") c (? . 41) c "<li>Section 1.1</li>" c (u . "\n") c (? . 20) c (? . 40) c (u . "\n") c (? . 19) c "</li>" c (u . "\n") c (? . 19) c "<li>Section 2</li>" c (u . "\n") c (? . 19) c "<li>Section 3</li>" c (u . "\n") c (? . 1) c (? . 40) c (u . "\n") c (? . 0) c "</aside>" c (u . "\n") c (? . 0) c "<main class=\"small-12 medium-auto col\">" c (u . "\n") c (? . 1) c "<article>" c (u . "\n") c (? . 19) c "<h1>Main Heading of the article</h1>" c (u . "\n") c (? . 19) c "<p>Introducing of the essay goes here.</p>" c (u . "\n") c (? . 19) c "<h2>Section 1—Photos</h2>" c (u . "\n") c (? . 19) c "<p>You’ll find a couple of images in the following that shows the flexbox-based block-grid system.</p>" c (u . "\n") c (? . 19) c "<div class=\"block-grid small-up-to-2 medium-up-to-3\">" c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c (? . 45) c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c "<img src=\"http://placehold.it/350x300\" alt=\"placeholder image\" />" c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c "<img src=\"http://placehold.it/700x400\" alt=\"placeholder image\" />" c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c "<img src=\"http://placehold.it/500x300\" alt=\"placeholder image\" />" c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c "<img src=\"http://placehold.it/500x600\" alt=\"placeholder image\" />" c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c (? . 45) c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c (? . 45) c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 20) c (? . 42) c (u . "\n") c (? . 41) c (? . 45) c (u . "\n") c (? . 41) c (? . 43) c (u . "\n") c (? . 20) c (? . 44) c (u . "\n") c (? . 19) c (? . 21) c (u . "\n") c (? . 19) c "<h3>1.1 Sub section</h3>" c (u . "\n") c (? . 19) c "<p>This is a paragraph of section 1.1. It’s the sub-section that conclude the section 1.</p>" c (u . "\n") c (? . 19) c "<h2>2. Section 2</h2>" c (u . "\n") c (? . 19) c "<p>We create more sections. An essay usually contains more than 1 section. This is the reason we put section 2 here.</p>" c (u . "\n") c (? . 19) c "<h2>3. Summary</h2>" c (u . "\n") c (? . 19) c "<p>This section summerize the entire article.</p>" c (u . "\n") c (? . 1) c "</article>" c (u . "\n") c (? . 0) c (? . 46) c (u . "\n") c (? . 0) c "<div class=\"advertisement row\">" c (u . "\n") c (? . 1) c "<div class=\"small-hidden xlarge-shrink col\">" c (u . "\n") c (? . 19) c "<img src=\"http://placehold.it/160x600&text=ad.\" alt=\"Advertisement\" />" c (u . "\n") c (? . 1) c (? . 21) c (u . "\n") c (? . 0) c (? . 21) c (u . "\n") c (? . 21) c (u . "\n") c (? . 47) c (u . "\n") c (? . 0) c (? . 38) c (u . "\n") c (? . 1) c (? . 48) c (u . "\n") c (? . 19) c "CC0 Do anything license." c (u . "\n") c (? . 1) c (? . 21) c (u . "\n") c (? . 0) c (? . 21) c (u . "\n") c (? . 49)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-3/grid.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/center-align.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Center align") c (q p "Center alignment is one of the most discussed topic in CSS. Flexbox provides a easy and elegant way to solve this layout issue.") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%202.24.06%20AM.png") c (c alt c (? . 50))))) c (c figcaption c (? . 50)))) c (c h2 c (c (c id c (u . "example—center-aligning-one-item"))) c (c a c (c (c href c (u . "#example—center-aligning-one-item"))) q "Example—Center aligning one item")) c (c pre c (c code c (c (c class c (? . 17))) c (? . 18) c (u . "\n") c (? . 0) c "<div class=\"item\">Center aligned.</div>" c (u . "\n") c (? . 21))) c (c pre c (c code c (c (c class c (? . 5))) c (? . 51) c (u . "\n") c (? . 0) c (? . 33) c (u . "\n") c (? . 2) c (u . "\n") c (? . 54) c (u . "\n") c (? . 0) c "margin: auto;" c (u . "\n") c (? . 2))) c (c p c "The beautify of " c (c code c (? . 52)) q " on the child items is that it automatically spread the items across the space with equivalent margins.") c (c h2 c (c (c id c (u . "example—distribute-multiple-items-in-container"))) c (c a c (c (c href c (u . "#example—distribute-multiple-items-in-container"))) q "Example—Distribute multiple items in container")) c (c p c "Thanks to the " c (c code c (? . 52)) q ", the browser automatically distribute all the items inside the flexbox container equally.") c (c pre c (c code c (c (c class c (? . 17))) c (? . 18) c (u . "\n") c (? . 0) c (? . 53) c (u . "\n") c (? . 0) c (? . 53) c (u . "\n") c (? . 0) c (? . 53) c (u . "\n") c (? . 21))) c (c h2 c (c (c id c (u . "using-align-items-and-justify-content"))) c (c a c (c (c href c (u . "#using-align-items-and-justify-content"))) q "Using align-items and justify-content")) c (c p c "Alternatively, we can configure the alignment in the container by using the " c (q code "align-items") c (? . 11) q (code "justify-content") " properties.") c (c pre c (c code c (c (c class c (? . 5))) c (? . 51) c (u . "\n") c (? . 0) c (? . 33) c (u . "\n") c (? . 0) c (? . 56) c (u . "\n") c (? . 0) c (? . 57) c (u . "\n") c (? . 2) c (u . "\n") c (? . 54) c (u . "\n") c (? . 0) c "/* No need to specify the alignment in children */" c (u . "\n") c (? . 2))) c (c h2 c (c (c id c (u . "example—center-aligning-multiple-items"))) c (c a c (c (c href c (u . "#example—center-aligning-multiple-items"))) q "Example—Center aligning multiple items")) c (q p "By using the container’s alignment options, we can center align multiple items together.") c (c pre c (c code c (c (c class c (? . 17))) c (? . 55) c (u . "\n") c (? . 0) c "height: 100%" c (u . "\n") c (? . 2) c (u . "\n") c (? . 51) c (u . "\n") c (? . 0) c (? . 33) c (u . "\n") c (? . 0) c (? . 13) c (u . "\n\n") c (? . 0) c (? . 56) c (u . "\n") c (? . 0) c (? . 57) c (u . "\n\n") c (? . 0) c (? . 58) c (u . "\n") c (? . 2) c (u . "\n") c ".box {" c (u . "\n") c (? . 0) c "height: 50px;" c (u . "\n") c (? . 0) c "width: 300px;" c (u . "\n") c (? . 0) c "margin: 0.2em;" c (u . "\n") c (? . 2))) c (c p c (c (q data-height "368") c (c data-slug-hash c (? . 59)) c (c data-theme-id c (? . 25)) c (c data-default-tab c (? . 26)) c (c data-user c (? . 27))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/dopZxX"))) c (c string-append c (? . 28) c (? . 59))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/center-align.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/grid-and-block-grid.html.pm" . unix) h ! (equal) (doc q root (h1 "Grid and block grid") (p "In grid system, we use lots of grid and block grid.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/grid-and-block-grid.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/floating-grid.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Floating grid") c (c p c "Revisiting the grid layout with " c (q em "float") c (? . 12)) c (q p "Row column grid system.") c (c pre c (c code c (c (c class c (? . 5))) c (? . 60) c (u . "\n") c (? . 61) c (u . "\n") c (? . 0) c (? . 62) c (u . "\n") c (? . 1) c ".col-#{$i} {" c (u . "\n") c (? . 19) c (? . 63) c (u . "\n") c (? . 1) c (? . 2) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2))) c (q p "Calculated result:") c (c pre c (c code c (c (c class c (? . 5))) c (? . 61) c (u . "\n") c (? . 0) c ".col-1 {" c (u . "\n") c (? . 1) c "width: 8.33333%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-2 {" c (u . "\n") c (? . 1) c "width: 16.66667%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-3 {" c (u . "\n") c (? . 1) c (? . 7) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-4 {" c (u . "\n") c (? . 1) c "width: 33.33333%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-5 {" c (u . "\n") c (? . 1) c "width: 41.66667%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-6 {" c (u . "\n") c (? . 1) c (? . 8) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-7 {" c (u . "\n") c (? . 1) c "width: 58.33333%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-8 {" c (u . "\n") c (? . 1) c "width: 66.66667%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-9 {" c (u . "\n") c (? . 1) c (? . 9) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-10 {" c (u . "\n") c (? . 1) c "width: 83.33333%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-11 {" c (u . "\n") c (? . 1) c "width: 91.66667%;" c (u . "\n") c (? . 0) c (? . 2) c (u . "\n\n") c (? . 0) c ".col-12 {" c (u . "\n") c (? . 1) c (? . 6) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2))) c (c h2 c (c (c id c (u . "applying-mobile-first-approach"))) c (c a c (c (c href c (u . "#applying-mobile-first-approach"))) q "Applying mobile first approach")) c (c pre c (c code c (c (c class c (? . 5))) c (? . 60) c (u . "\n") c "$breakpoint: 800px;" c (u . "\n") c (? . 61) c (u . "\n") c (? . 0) c (? . 62) c (u . "\n") c (? . 1) c ".small-#{$i} {" c (u . "\n") c (? . 19) c (? . 63) c (u . "\n") c (? . 1) c (? . 2) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2) c (u . "\n") c "@media screen and (min-width: $breakpoint) {" c (u . "\n") c (? . 0) c (? . 62) c (u . "\n") c (? . 1) c ".medium-#{$i} {" c (u . "\n") c (? . 19) c (? . 63) c (u . "\n") c (? . 1) c (? . 2) c (u . "\n") c (? . 0) c (? . 2) c (u . "\n") c (? . 2)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/floating-grid.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/log.html.pm" . unix) h ! (equal) (doc c root c (q h1 "log") c (c p c (c li c (q strong "2015-05-22") c (? . 10) q "First draft written for WIDS2015."))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/log.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/summary.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Summary") c (q p "After going through this book, you should have more understandings on how we can make use of Flexbox when building website. It provides a very simple way to archive some layouts that was difficult to implement.") c (c h2 c (c (c id c (u . "useful-resources"))) c (c a c (c (c href c (u . "#useful-resources"))) q "Useful resources")) q (p (a ((href "https://css-tricks.com/snippets/css/a-guide-to-flexbox/")) "CSS-Trick’s complete guide to Flexbox") (br) (a ((href "http://makzan.net/web-design-scrapbook/learning-flexbox/")) "My cheatsheet on Flexbox alignment") (br) (a ((href "https://github.com/philipwalton/flexbugs")) "Known borwser issues on implementing flexbox"))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/summary.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/index.html.pm" . unix) h ! (equal) (doc c root c (c h1 c (? . 64)) c (c p c "Welcome to the workshop. I’m " c (c em c (? . 65)) c (? . 12)) c (c p c "You may find these workshop slides at " c (q a ((href "http://flexbox.website")) "Flexbox.website") c (? . 12)) c (c ol c (c li c (c a c (q (href "./about-makzan.html")) c (? . 66))) q (li (a ((href "./contact.html")) "Contact")) (li (a ((href "./preparing.html")) "Preparing")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/index.html.pm")) (mod-time . 1432258482)) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/preparing.html.pm" . unix) h ! (equal) (doc c root c (q h1 "Preparing for the workshop") c (q p "You’ll need to bring your laptop with a modern browser and your favorite code editor installed. During the workshop, we will have some hand-on exercises. You can download all the material in the following link. It contains the code, images and libraries we need.") c (c p c (c a c (c (c href c (? . 67))) c (? . 67))) c (c h2 c (c (c id c (u . "-prefix-free-library"))) c (c a c (c (c href c (u . "#-prefix-free-library"))) q "-prefix-free library")) c (q p (a ((href "http://leaverou.github.io/prefixfree/")) "-prefix-free") " is the JS library made by " (a ((href "http://lea.verou.me/")) "Lea Verou") ". It parses the CSS properties and apply centain vendor prefixes on the rules by determing the browser version. This library allows us to skip worrying about different syntaxes—prefixes and the old syntaxes.") c (c h2 c (c (c id c (u . "preprocessor"))) c (c a c (c (c href c (u . "#preprocessor"))) q "Preprocessor")) q (p "The logic in CSS preprocessor provides us the DRY—Don’t repeat yourself— way to write the CSS code. We will use some SCSS code when defining the grid layout. It’s loop and list feature helps reducing the lines of code a lot. If you are using other preprocessor, you may find their equivalents in " (a ((href "http://pre.com")) "CSSPre.com") ". If you aren’t using any preprocessor, no worry, we also provide the full CSS code. ")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/preparing.html.pm")) (mod-time . 1432258482))))