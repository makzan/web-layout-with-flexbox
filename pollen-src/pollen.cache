((3) 0 () 141 ("flex-direction" "language-css" ".container{" "  " "}" ", " "justify" "justify-content" "align-items" "Row and column layout" "    " "width: 100%;" "width: 25%;" "width: 50%;" "width: 75%;" "      " "</div>" "<div class=\"row\">" "<p>Main content goes here.</p>" "<img src=\"http://placehold.it/500x300\" alt=\"placeholder\">" "<div class=\"small-12 col\">" "Web page displayed in small screen." "Web page displayed in wider screen." "block-grid-2" "In small screen." "In medium screen." "In large screen." "In extra large screen." "In xx-large screen." "GJjMEL" "Chapter 1—Introducing Flexbox" "Chapter 3—Grid layout, powered by FlexBox" "Chapter 2—Row–Column grid layout" " " "Container and items" "Flex grow and shrink" " and " "." "language-markup" "<p>Main content.</p>" "</main>" "<footer>" "</footer>" "Our code running in small screen." "height: 100%;" "flex: 0 1 auto;" "flex: 1;" "15336" "result" "makzan" "http://codepen.io/makzan/pen/" "mJrqzO" "Appendix" "Inputs" "The result running in browser." "time-for-action" "#time-for-action" "Time for Action—" "<div class=\"container\">" "        " "<fieldset>" "<div class=\"input\">" "</fieldset>" "display: flex;" ".container {" ".input > span {" ".input > input {" "padding: 0.5em;" "zGKPRb" "Object-fit" "pvKeOb" "Photo credit: Dick Chan." "bronze" "/* Border box */" "img {" ".row {" "max-width: 100%;" "margin: 0 auto;" ".row .row {" "width: auto;" "max-width: none;" ".col {" "padding: 0 10px;" "shrink" "display: block;" "flex-wrap: wrap;" "@for $i from 1 through length($screen-sizes) {" "@media screen and (min-width: nth($breakpoints, $i)){" "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.51.12%20PM.png" "Our web layout." "<header>" "</header>" "<li><a href=\"#\">Home</a></li>" "<li><a href=\"#\">About</a></li>" "<li><a href=\"#\">Clients</a></li>" "<li><a href=\"#\">Contact Us</a></li>" "</ul>" "</nav>" "<ol>" "</ol>" "</aside>" "          " "<figure>" "<figcaption>This is a placeholder.</figcaption>" "</figure>" "<img src=\"http://placehold.it/300x300\" alt=\"placeholder image\" />" "Here is the final result we get:" "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.50.45%20PM.png" "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.50.53%20PM.png" "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.51.02%20PM.png" "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.51.19%20PM.png" "You can find the final code in the following CodePen demo." "500" "The result of center-aligned item inside the container." "Multiple items are automatically distributed within container." "margin: auto" "<div class=\"item\">Item.</div>" "align-items: center;" "justify-content: center;" ".item {" "Multiple items being center aligned." "html, body {" "flex-direction: column;" "dopZxX" "@for $i from 1 through $columns-count {" "width: 100%/$columns-count * $i;" "@media screen {" ".small-1 {" ".small-2 {" ".small-3 {" ".small-4 {" ".medium-1 {" ".medium-2 {" ".medium-3 {" ".medium-4 {" "$columns-count: 4;" ".small-#{$i} {" "Summary" "Chapter 0—Preparation" "Thomas Mak" "About Makzan") () (h ! (equal) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/index.html.pm" . unix) h ! (equal) (mod-time . 1432283899) (doc c root c (c h1 c (? . 30)) c (c ol c (q li (a ((href "./flex-direction.html")) "Flex direction")) c (q li (a ((href "./center-align.html")) "Center alignment")) c (c li c (c a c (q (href "./container-and-items.html")) c (? . 34))) c (c li c (c a c (q (href "./flex-grow-and-shrink.html")) c (? . 35))) c (c li c (c a c (q (href "./inputs.html")) c (? . 53))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/index.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/flex-direction.html.pm" . unix) h ! (equal) (mod-time . 1432258482) (doc c root c (c h1 c (? . 0)) c (c p c "In Flexbox, we control how items are placed within the container. A container is a box with X and Y axis. The Flexbox’s property name doesn’t use X, Y, Left, Top wordings. It’s because we can set " c (c code c (? . 0)) c " to control the " c (q em "Main Axis") c ". The other axis is called " c (q em "Cross Axis") c (? . 37)) c (c pre c (c code c (c (c class c (? . 1))) c (? . 2) c (u . "\n") c (? . 3) c "flex-direction: row; /* Align from left to right. */" c (u . "\n") c (? . 4))) c (c pre c (c code c (c (c class c (? . 1))) c (? . 2) c (u . "\n") c (? . 3) c "flex-direction: column; /* Align from top to bottom. */" c (u . "\n") c (? . 4))) c (c h2 c (c (c id c (u . "align-and-justify"))) c (c a c (c (c href c (u . "#align-and-justify"))) q "align and justify")) c (c p c "We can now better unterstand the " c (q em "align") c (? . 36) c (c em c (? . 6)) c " after we learn the direction concept. " c (c code c (? . 8)) c " aligns items on the cross axis and " c (c code c (? . 7)) q " algins items on the main axis.") c (c p c "Think about justifying a text in word processor. Noramlly we write the text for left to right. Let’s assume this is as same as having a " c (q code "row") c " direction for our text content. When we click the " c (q em "left") c (? . 5) c (q em "center") c (? . 5) c (q em "right") c " or " c (c em c (? . 6)) c " alignment buttons on the toolbar, we can move the content in the row direction. This is what " c (c code c (? . 7)) q " means—How the content itself aligns in the main axis.") c (c p c "Once we know " c (c code c (? . 7)) c " is for the main axis, we know " c (c code c (? . 8)) q " is for the other one.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/flex-direction.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/row-column-based-layout.html.pm" . unix) h ! (equal) (mod-time . 1432271591) (doc c root c (q h1 "Row-columns-based layout") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/row-column-grid-6113c4d65e2f9513a6603b7999c5adb4.png") c (c alt c (? . 9))))) c (c figcaption c (? . 9)))) c (q p "Before building our Flexbox layout, we revisit the traditional float-based grid layout. One of the easiest approach to implement grid is using the row-columns approach.") c (c h2 c (c (c id c (? . 55))) c (c a c (c (c href c (? . 56))) c (c string-append c (? . 57) q "Build our own minimal float-based grid layout"))) c (q aside "I assumed we have a basic norimalization or CSS reset applied to the page.") c (c ol c (c li c (q p "At first, we define the following rules that prevents our layout broken by box-model or extra-large images.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 73) c (u . "\n") c "* {box-sizing: border-box;}" c (u . "\n\n") c "/* Prevent image breaking our layout */" c (u . "\n") q "img {max-width: 100%;}"))) c (c li c (q p "Then we define the basic row-column properties that construct the foundation.") c (c pre c (c code c (c (c class c (? . 1))) c "/* Grid: row */" c (u . "\n") c (? . 75) c (u . "\n") c (? . 3) c (? . 11) c (u . "\n") c (? . 3) c "max-width: 600px;" c (u . "\n") c (? . 3) c (? . 77) c (u . "\n") c (? . 3) c "padding-top: 10px;" c (u . "\n") c (? . 3) c "padding-bottom: 10px;" c (u . "\n") c (? . 3) c "overflow: auto;" c (u . "\n") c (? . 4) c (u . "\n\n") c "/* Row within column within row */" c (u . "\n") c (? . 78) c (u . "\n") c (? . 3) c (? . 79) c (u . "\n") c (? . 3) c (? . 80) c (u . "\n") c (? . 3) c "margin: 0 -10px;" c (u . "\n") c (? . 4) c (u . "\n\n") c "/* Grid: column */" c (u . "\n") c (? . 81) c (u . "\n") c (? . 3) c (? . 82) c (u . "\n") c (? . 3) c "float:left;" c (u . "\n") c (? . 4)))) c (c li c (q p "Mobile first design means that we work on the smallest layout first.") c (q aside "To make the code simpler, I’m using 4-columns in the code example. In production, we may want to use a 12 or 16 columns. Actually we will switch to 12-columns In next step when using Scss to generate our CSS code.") c (c pre c (c code c (c (c class c (? . 1))) c "/* Dividing into columns */" c (u . "\n") c "@media screen  {" c (u . "\n") c (? . 3) c (? . 127) c (u . "\n") c (? . 10) c (? . 12) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 3) c (? . 128) c (u . "\n") c (? . 10) c (? . 13) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 3) c (? . 129) c (u . "\n") c (? . 10) c (? . 14) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 3) c (? . 130) c (u . "\n") c (? . 10) c (? . 11) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4)))) c (c li c (q p "After the " (em "small") " layout, we define the " (em "medium") " which overrides the smaller layout configure if presented in the HTML.") c (c pre c (c code c (c (c class c (? . 1))) c "@media screen and (min-width: 600px) {" c (u . "\n") c (? . 3) c (? . 131) c (u . "\n") c (? . 10) c (? . 12) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 3) c (? . 132) c (u . "\n") c (? . 10) c (? . 13) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 3) c (? . 133) c (u . "\n") c (? . 10) c (? . 14) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 3) c (? . 134) c (u . "\n") c (? . 10) c (? . 11) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4))))) c (c h2 c (c (c id c (u . "mobile-first-design"))) c (c a c (c (c href c (u . "#mobile-first-design"))) q "Mobile first design")) c (q p "Mobile first means that during our website planning, we plan the content and layout for the mobile first. Planning for mobile first ensures us to consider the most important thing of our website. The screen is so tiny that we have to think clearly what’s important enough to earn a place there. And what is the most important thing that we put it on top of this tiny screen.") c (c p c "In grid system, mobile first means we use the " c (q code "small-*") c " layout modifiers by default. When we need to build a wider layout, we start using the " c (q code "medium-*") c (? . 5) q (code "large-*") " and even " (code "xlarge-*") ". Each one overrides the smaller one.") c (c h2 c (c (c id c (u . "using-our-grid-system"))) c (c a c (c (c href c (u . "#using-our-grid-system"))) q "Using our grid system")) c (q p "The following HTML is an example showing our grid system.") c (q aside "The HTML code only shows the grid structure. You may need to include the proper HTML structure with <head> and includes the CSS styles") c (c pre c (c code c (c (c class c (? . 38))) c (? . 17) c (u . "\n") c (? . 3) c "<div class=\"small-12 col\">Float based layout</div>" c (u . "\n") c (? . 16) c (u . "\n") c "<nav class=\"row\">" c (u . "\n") c (? . 3) c (? . 20) c (u . "\n") c (? . 10) c "<ul>" c (u . "\n") c (? . 15) c (? . 92) c (u . "\n") c (? . 15) c (? . 93) c (u . "\n") c (? . 15) c (? . 94) c (u . "\n") c (? . 15) c (? . 95) c (u . "\n") c (? . 10) c (? . 96) c (u . "\n") c (? . 3) c (? . 16) c (u . "\n") c (? . 97) c (u . "\n") c (? . 17) c (u . "\n") c (? . 3) c "<main class=\"small-4 medium-3 col\">" c (u . "\n") c (? . 10) c "<h1>Headnig of main content</h1>" c (u . "\n") c (? . 10) c (? . 18) c (u . "\n") c (? . 10) c (? . 18) c (u . "\n") c (? . 10) c (? . 18) c (u . "\n") c (? . 10) c (? . 18) c (u . "\n") c (? . 3) c (? . 40) c (u . "\n") c (? . 3) c "<aside class=\"small-4 medium-1 col\">" c (u . "\n") c (? . 10) c "<p>Aside content goes here.</p>" c (u . "\n") c (? . 10) c (? . 19) c (u . "\n") c (? . 10) c (? . 19) c (u . "\n") c (? . 3) c (? . 100) c (u . "\n") c (? . 16) c (u . "\n") c (? . 41) c (u . "\n") c (? . 3) c (? . 17) c (u . "\n") c (? . 10) c (? . 20) c (u . "\n") c (? . 15) c "<p>This is a demo in <a href=\"http://flexbox.website\">Web layout with Flexbox</a> workshop by <a href=\"http://makzan.net\">makzan</a>.</p>" c (u . "\n") c (? . 10) c (? . 16) c (u . "\n") c (? . 3) c (? . 16) c (u . "\n") c (? . 42))) c (q p "When running the page in browser, we will see the following screens.") c (c div c (c (c class c (? . 23))) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%2012.14.54%20PM.png") c (c alt c (? . 21))))) c (c figcaption c (? . 21))) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%2012.15.02%20PM.png") c (c alt c (? . 22))))) c (c figcaption c (? . 22))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/row-column-based-layout.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/index.ptree" . unix) h ! (equal) (mod-time . 1432283784) (doc q pagetree-root index.html (chapter-0/index.html chapter-0/about-makzan.html chapter-0/contact.html chapter-0/preparing.html) (chapter-1/index.html chapter-1/flex-direction.html chapter-1/center-align.html chapter-1/container-and-items.html chapter-1/flex-grow-and-shrink.html chapter-1/inputs.html) (chapter-2/index.html chapter-2/row-column-based-layout.html chapter-2/floating-grid.html) (chapter-3/index.html chapter-3/grid.html) summary.html (appendix/index.html appendix/object-fit.html appendix/about-pollen.html) log.html) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.ptree"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-3/index.html.pm" . unix) h ! (equal) (mod-time . 1432274127) (doc c root c (c h1 c (? . 31)) c (q p "At the end of this chapter, we will complete the following website with a Flexbox grid system that we can reuse in other projects.") c (c p c (? . 106)) c (c div c (c (c class c (? . 23))) c (c figure c (c p c (c img c (c (c src c (? . 107)) c (c alt c (? . 24))))) c (c figcaption c (? . 24))) c (c figure c (c p c (c img c (c (c src c (? . 108)) c (c alt c (? . 25))))) c (c figcaption c (? . 25)))) c (c div c (c (c class c (? . 23))) c (c figure c (c p c (c img c (c (c src c (? . 109)) c (c alt c (? . 26))))) c (c figcaption c (? . 26))) c (c figure c (c p c (c img c (c (c src c (? . 88)) c (c alt c (? . 27))))) c (c figcaption c (? . 27)))) c (c figure c (c p c (c img c (c (c src c (? . 110)) c (c alt c (? . 28))))) c (c figcaption c (? . 28))) c (c p c (? . 111)) c (c p c (c (c data-height c (? . 112)) c (c data-slug-hash c (? . 29)) c (c data-theme-id c (? . 47)) c (c data-default-tab c (? . 48)) c (c data-user c (? . 49))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/GJjMEL"))) c (? . 50) c (? . 29)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-3/index.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/index.html.pm" . unix) h ! (equal) (mod-time . 1433726505) (doc c root c (q h1 "Building Flexbox website") c (q p "This is the material I originally created for workshop “" (strong "Web Layout with Flexbox") "” at " (em "World Internet Developer Summit 2015") " in Hong Kong.") c (c ol c (c li c (c a c (q (href "/chapter-0/")) c (? . 138))) c (c li c (c a c (q (href "/chapter-1/")) c (? . 30))) c (c li c (c a c (q (href "/chapter-2/")) c (? . 32))) c (c li c (c a c (q (href "/chapter-3/")) c (? . 31))) c (c li c (c a c (q (href "/summary.html")) c (? . 137))) c (c li c (c a c (q (href "/appendix/")) c (? . 52))))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/index.html.pm" . unix) h ! (equal) (mod-time . 1432273072) (doc c root c (c h1 c (? . 32)) q (ol (li (a ((href "./row-column-based-layout.html")) "Row–column based layout")) (li (a ((href "./floating-grid.html")) "Floating grid system")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/index.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/contact.html.pm" . unix) h ! (equal) (mod-time . 1432258481) (doc c root c (q h1 "Have a chat") c (q p "You may contact me for any kind of questions and sharings. I focus on mobile web and iOS app develompnet. I also built multiplayer interaction with socket server and node.js. I like to learn more.") c (c p c (q small "twitter:") c (? . 33) c (q a ((href "https://twitter.com/makzan")) "@makzan") c (q br) c (q small "website:") c (? . 33) c (q a ((href "http://makzan.net")) "makzan.net") c (q br) c (q small "email:") c (? . 33) c (q a ((href "mailto:mak@makzan.net")) "mak@makzan.net") c (q br) c (q small "work email:") c (? . 33) q (a ((href "mailto:thomas@cpttm.org.mo")) "thomas@cpttm.org.mo")) q (p "Just ping me at any time for a chat.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/contact.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/container-and-items.html.pm" . unix) h ! (equal) (mod-time . 1432258482) (doc c root c (c h1 c (? . 34)) q (p "We only think of 1 container and it’s direct children at any given moment.") (p "We should only focus on one container and its direct child items. Flexbox is all about the container and how items inside it take the spaces. When dealing with the container-items pair, we don’t care if the item is a container of another set of elements. We just think of 1 container and it’s direct children.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/container-and-items.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/flex-grow-and-shrink.html.pm" . unix) h ! (equal) (mod-time . 1432268902) (doc c root c (c h1 c (? . 35)) c (c p c "When we’re building the grid layout, we need to master another concept of flexbox—" c (q em "grow") c (? . 36) c (c em c (? . 83)) c (? . 37)) c (c h2 c (c (c id c (u . "flex-grow"))) c (c a c (c (c href c (u . "#flex-grow"))) q "flex-grow")) c (c p c "Grow defines how the items expand to takes the extra spaces. Grow affects the items when there are empty spaces in the container. Grow defines the ratio each item should expand. Given value 1 on all items mean each one of them should take equaly width, or height, depends on the " c (c code c (? . 0)) c (? . 37)) c (c pre c (c code c (c (c class c (? . 1))) c (? . 46))) c (c h2 c (c (c id c (u . "flex-shrink"))) c (c a c (c (c href c (u . "#flex-shrink"))) q "flex-shrink")) c (q p "Shrink is how each item should squeeze when the container is smaller. Having value 1 on all items means all items shrinks equally.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 45))) c (c h2 c (c (c id c (u . "applying-grow-and-shrink"))) c (c a c (c (c href c (u . "#applying-grow-and-shrink"))) q "Applying grow and shrink")) c (q p "Given the following HTML structure:") c (c pre c (c code c (c (c class c (? . 38))) c (? . 58) c (u . "\n") c (? . 3) c (? . 90) c (u . "\n") c (? . 10) c "Header goes here." c (u . "\n") c (? . 3) c (? . 91) c (u . "\n") c (? . 3) c "<main>" c (u . "\n") c (? . 10) c (? . 39) c (u . "\n") c (? . 10) c (? . 39) c (u . "\n") c (? . 10) c (? . 39) c (u . "\n") c (? . 10) c (? . 39) c (u . "\n") c (? . 10) c "..." c (u . "\n") c (? . 3) c (? . 40) c (u . "\n") c (? . 3) c (? . 41) c (u . "\n") c (? . 10) c "Footer goes here." c (u . "\n") c (? . 3) c (? . 42) c (u . "\n") c (? . 16))) c (q p "We can make the header and footer shrink to its content height. Then we make the main content auto expand to take up all the spaces.") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%2012.24.39%20PM.png") c (c alt c (? . 43))))) c (c figcaption c (? . 43)))) c (c pre c (c code c (c (c class c (? . 1))) c (? . 121) c (u . "\n") c (? . 3) c (? . 44) c (u . "\n") c (? . 4) c (u . "\n") c (? . 64) c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 3) c (? . 122) c (u . "\n") c (? . 3) c (? . 44) c (u . "\n") c (? . 4) c (u . "\n") c "header, footer {" c (u . "\n") c (? . 3) c (? . 45) c (u . "\n") c (? . 4) c (u . "\n") c "main {" c (u . "\n") c (? . 3) c (? . 46) c (u . "\n") c (? . 3) c "overflow: scroll;" c (u . "\n") c (? . 3) c "-webkit-overflow-scrolling:touch;" c (u . "\n") c (? . 4))) c (q p "You may also find the live code in the following codepen demo.") c (c p c (c (q data-height "400") c (c data-slug-hash c (? . 51)) c (c data-theme-id c (? . 47)) c (c data-default-tab c (? . 48)) c (c data-user c (? . 49))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/mJrqzO"))) c (? . 50) c (? . 51)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/flex-grow-and-shrink.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/appendix/index.html.pm" . unix) h ! (equal) (mod-time . 1432274456) (doc c root c (c h1 c (? . 52)) c (q p "Something that’s not related to Flexbox, but still worth a mention.") c (c ol c (c li c (c a c (q (href "./object-fit.html")) c (? . 69))) q (li (a ((href "./about-pollen.html")) "About pollen")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/appendix/index.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/appendix/about-pollen.html.pm" . unix) h ! (equal) (mod-time . 1433147071) (doc q root (h1 "About Pollen") (p "If you check the source code of this website, you may wonder why the HTML contains non-standard HTML tag. It’s because I compose this website by using the " (a ((href "http://pollenpub.com")) "Pollen") "—A racket package that encourages writing books like a program. I’m still learning how to use Pollen and output valid HTML code. ")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/appendix/about-pollen.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/inputs.html.pm" . unix) h ! (equal) (mod-time . 1432269538) (doc c root c (c h1 c (? . 53)) c (q p "With the grow and shrink feature, we can define items that shrinks to its content’s width, and the main input will take all the rest of the space.") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%2012.28.50%20PM.png") c (c alt c (? . 54))))) c (c figcaption c (? . 54)))) c (c h2 c (c (c id c (? . 55))) c (c a c (c (c href c (? . 56))) c (c string-append c (? . 57) q "Creating an input form with prefix and postfix"))) c (c ol c (c li c (q p "First, we create the following HTML markup.") c (c pre c (c code c (c (c class c (? . 38))) c (? . 58) c (u . "\n") c (? . 3) c "<form>" c (u . "\n") c (? . 10) c (? . 60) c (u . "\n") c (? . 15) c "<label for=\"twitter-handle\">Twitter:</label>" c (u . "\n") c (? . 15) c (? . 61) c (u . "\n") c (? . 59) c "<span>@</span>" c (u . "\n") c (? . 59) c "<input type=\"text\" id=\"twitter-handle\" placeholder=\"username\" autofocus>" c (u . "\n") c (? . 15) c (? . 16) c (u . "\n") c (? . 10) c (? . 62) c (u . "\n") c (? . 10) c (? . 60) c (u . "\n") c (? . 15) c "<label for=\"twitter-handle\">Create your domain:</label>" c (u . "\n") c (? . 15) c (? . 61) c (u . "\n") c (? . 59) c "<input type=\"text\" id=\"twitter-handle\" placeholder=\"www\">" c (u . "\n") c (? . 59) c "<span>.makzan.net</span>" c (u . "\n") c (? . 15) c (? . 16) c (u . "\n") c (? . 10) c (? . 62) c (u . "\n") c (? . 10) c "<input type=\"submit\" value=\"Done\">" c (u . "\n") c (? . 3) c "</form>" c (u . "\n") c (? . 16)))) c (c li c (q p "Then we just need few lines of flex code to make it works. Display flex, grow, shrink, and Done.") c (c pre c (c code c (c (c class c (? . 1))) c ".input {" c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 4) c (u . "\n") c (? . 65) c (u . "\n") c (? . 3) c (? . 45) c (u . "\n") c (? . 4) c (u . "\n") c (? . 66) c (u . "\n") c (? . 3) c (? . 46) c (u . "\n") c (? . 4)))) c (c li c (q p "Well, I actually applied more styles to make the input looks nice. I added the following code to archive the screenshot we show at the beginning. They are not our focus, but I include it so you see how we can make our inputs more easily to use by using padding.") c (c pre c (c code c (c (c class c (? . 1))) c "/* Container flexbox */" c (u . "\n") c (? . 64) c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 3) c (? . 117) c (u . "\n") c (? . 3) c (? . 118) c (u . "\n") c (? . 3) c "height: 100vh;" c (u . "\n") c (? . 4) c (u . "\n\n\n") c "/* Not our focus */" c (u . "\n") c "fieldset{" c (u . "\n") c (? . 3) c "border: none;" c (u . "\n") c (? . 3) c "padding: 0;" c (u . "\n") c (? . 3) c "margin: 1em 0;" c (u . "\n") c (? . 4) c (u . "\n\n") c (? . 65) c (u . "\n") c (? . 3) c (? . 84) c (u . "\n") c (? . 3) c "background: #efefef;" c (u . "\n") c (? . 3) c (? . 67) c (u . "\n") c (? . 4) c (u . "\n") c (? . 66) c (u . "\n") c (? . 3) c (? . 67) c (u . "\n") c (? . 4) c (u . "\n\n") c "input[type=\"submit\"] {" c (u . "\n") c (? . 3) c (? . 11) c (u . "\n") c (? . 3) c (? . 67) c (u . "\n") c (? . 4))))) c (c h2 c (c (c id c (u . "live-demo"))) c (c a c (c (c href c (u . "#live-demo"))) q "Live Demo")) c (q p "You may find the live demo of the code in the following codepen entry.") c (c p c (c (q data-height "385") c (c data-slug-hash c (? . 68)) c (c data-theme-id c (? . 47)) c (c data-default-tab c (? . 48)) c (c data-user c (? . 49))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/zGKPRb"))) c (? . 50) c (? . 68)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/inputs.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/appendix/object-fit.html.pm" . unix) h ! (equal) (mod-time . 1432258481) (doc c root c (c h1 c (? . 69)) c (c p c "Object-fit provides us " c (q code "cover") c (? . 36) q (code "contain") " control which is similar to " (code "background-size") ". The difference is that background image is a decoration that happens in CSS. Object-fit, on the other hand, applies to <img> tag. An img tag is treated as content and hence it keeps the accessibility.") c (c pre c (c code c (c (c class c (? . 1))) c "figure {" c (u . "\n") c (? . 3) c "padding: 5px;" c (u . "\n\n") c (? . 3) c (? . 74) c (u . "\n") c (? . 10) c (? . 11) c (u . "\n") c (? . 10) c "height: 200px;" c (u . "\n") c (? . 10) c "object-fit: cover;" c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c "figcaption {" c (u . "\n") c (? . 10) c "text-align: center;" c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4))) c (c p c (c (q data-height "700") c (c data-slug-hash c (? . 70)) c (c data-theme-id c (? . 47)) c (c data-default-tab c (? . 48)) c (c data-user c (? . 49))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/pvKeOb"))) c (? . 50) c (? . 70)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/appendix/object-fit.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/about-makzan.html.pm" . unix) h ! (equal) (mod-time . 1432274809) (doc c root c (c h1 c (? . 140)) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/hkbu-sharing-3f407523e22e39c56e436a521adef9e6.jpg") c (c alt c (? . 71))))) c (c figcaption c (? . 71)))) c (c p c "I’m " c (c em c (? . 139)) c ". You’ll also find me on internet as " c (q em "Makzan") c ". I teach know-how via " c (q a ((href "https://www.packtpub.com/game-development/html5-game-development-hotshot")) "books") c (? . 5) c (q a ((href "https://www.packtpub.com/game-development/html5-game-development-video")) "screencasts") c (? . 36) c (q a ((href "http://www.mobiledesignclass.com")) "classes") c (? . 37)) c (q p "I’m now in Macao to help transfering technology knowledge to Macao’s small-medium enterprise. That’s why I’m currently working at CPTTM—Macau Productivity and Technology Transfer Center.") c (c h2 c (c (c id c (u . "macau-productivity-and-technology-transfer-center"))) c (c a c (c (c href c (u . "#macau-productivity-and-technology-transfer-center"))) q "Macau Productivity and Technology Transfer Center")) c (q p "We are the largest IT professional training center in Macau. We provide training on networking, app development, creative designs, 3D printing and lots more.") c (c p c "We also train students and teenagers to different competitions. For instance, I was the students in 2003 and won the " c (c em c (? . 72)) c " medal of web design in switzerland. I became the trainer from 2009 and brought my students to win the " c (c em c (? . 72)) c (? . 36) q (em "silver") " medal in London and Germany in recent years.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/about-makzan.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-3/grid.html.pm" . unix) h ! (equal) (mod-time . 1432275041) (doc c root c (q h1 "Implementation of the grid") c (q p "We have learned the basic functionality of using Flexbox. We also learned the traditional float-based grid layout. Now we are ready to create our own Flexbox layout based on what we learned.") c (c h2 c (c (c id c (? . 55))) c (c a c (c (c href c (? . 56))) c (c string-append c (? . 57) q "Migrating our grid into Flexbox"))) c (c ol c (c li c (q p "Our basic CSS hasn’t changed much. We changed the " (code ".row") " into " (code "display:flex") " with " (code "flex-wrap") ". The other parts are same as the float-based grid.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 73) c (u . "\n") c "* {" c (u . "\n") c (? . 3) c "box-sizing: border-box;" c (u . "\n") c (? . 4) c (u . "\n\n") c (? . 74) c (u . "\n") c (? . 3) c (? . 76) c (u . "\n") c (? . 4) c (u . "\n\n") c "/* Grid */" c (u . "\n") c (? . 75) c (u . "\n") c (? . 3) c "/* if you need a largest width */" c (u . "\n") c (? . 3) c "width: 1920px;" c (u . "\n") c (? . 3) c (? . 76) c (u . "\n") c (? . 3) c (? . 77) c (u . "\n\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 3) c (? . 85) c (u . "\n") c (? . 4) c (u . "\n") c (? . 78) c (u . "\n") c (? . 3) c "margin-left: -10px;" c (u . "\n") c (? . 3) c "margin-right: -10px;" c (u . "\n") c (? . 3) c (? . 79) c (u . "\n") c (? . 3) c (? . 80) c (u . "\n") c (? . 4) c (u . "\n\n") c (? . 81) c (u . "\n") c (? . 3) c (? . 82) c (u . "\n") c (? . 3) c "min-width: 0;" c (u . "\n\n") c (? . 3) c "border: 1px dashed LIGHTGRAY; /* for debugging */" c (u . "\n") c (? . 4)))) c (c li c (c aside c (q code "flex: 0 1 50%") c " means " c (q code "flex-grow:0") c (? . 5) c (q code "flex-shrink:1") c (? . 36) q (code "flex-basis:50%")) c (c p c "Our final outcome is to replace the " c (q code "width") c " in column with something like " c (q code "flex: 0 1 50%;") c (? . 36) q (code "flex: 0 1 100%;") ". The pertentage acts as the desired width value. But we don’t define the width. We define the " (code "flex-basis") " which is essentially the " (code "min-width") " of the element. Flexbox will calculate how much space each item takes based on this value.")) c (c li c (c p c "It’s very easy to define our " c (q em "mobile-first grid system") c " by using the Scss’s list, loop and variable. In the code, we not only define the columns’ width, we also define classes for " c (q em "auto expand") c (? . 5) c (c em c (? . 83)) c (? . 5) c (q em "vertical direction") c (? . 36) q (em "horizontal direction") ". An extra " (em "hidden") " class allows us to hide element in smaller screen.") c (c pre c (c code c (c (c class c (? . 1))) c "$columns-count: 12;" c (u . "\n") c "$screen-sizes: small medium large xlarge xxlarge;" c (u . "\n") c "$breakpoints: 0 500px 1000px 1200px 1600px;" c (u . "\n") c (? . 86) c (u . "\n") c (? . 3) c (? . 87) c (u . "\n") c (? . 10) c ".#{nth($screen-sizes, $i)}-vertical { flex-direction:column; }" c (u . "\n") c (? . 10) c ".#{nth($screen-sizes, $i)}-horizontal { flex-direction:row; }" c (u . "\n") c (? . 10) c ".#{nth($screen-sizes, $i)}-hidden { display: none; }" c (u . "\n") c (? . 10) c ".#{nth($screen-sizes, $i)}-auto   { display: block; flex: 1}" c (u . "\n") c (? . 10) c ".#{nth($screen-sizes, $i)}-shrink { display: block; flex: 0 1 auto}" c (u . "\n") c (? . 10) c "@for $j from 1 through $columns-count {" c (u . "\n") c (? . 15) c ".#{nth($screen-sizes, $i)}-#{$j} {" c (u . "\n") c (? . 59) c (? . 84) c (u . "\n") c (? . 59) c "flex: 0 1 calc( 100% / #{$columns-count} * #{$j} );" c (u . "\n") c (? . 15) c (? . 4) c (u . "\n") c (? . 10) c (? . 4) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4))))) c (c h2 c (c (c id c (u . "implementation-of-block-grid"))) c (c a c (c (c href c (u . "#implementation-of-block-grid"))) q "Implementation of block grid")) c (q p "Block grid is a grid system that we define how many items per roles inside the container. It trys to evenly distribute the items into the container within the items-limitation per role.") c (c pre c (c code c (c (c class c (? . 1))) c "/* Block grid */" c (u . "\n") c ".block-grid {" c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 3) c (? . 85) c (u . "\n") c (? . 4) c (u . "\n") c ".block-grid > * { flex: 1; }" c (u . "\n") c (? . 86) c (u . "\n") c (? . 3) c (? . 87) c (u . "\n") c (? . 10) c "@for $j from 2 through 10 {" c (u . "\n") c (? . 15) c ".block-grid.#{nth($screen-sizes, $i)}-up-to-#{$j} > * {" c (u . "\n") c (? . 59) c "flex: 0 1 calc( 100% / #{$j} );" c (u . "\n") c (? . 15) c (? . 4) c (u . "\n") c (? . 10) c (? . 4) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4))) c (c h2 c (c (c id c (u . "html-that-uses-the-grid"))) c (c a c (c (c href c (u . "#html-that-uses-the-grid"))) q "HTML that uses the grid")) c (c aside c (c figure c (c p c (c img c (c (c src c (? . 88)) c (c alt c (? . 89))))) c (c figcaption c (? . 89)))) c (c pre c (c code c (c (c class c (? . 38))) c (? . 90) c (u . "\n") c (? . 3) c (? . 17) c (u . "\n") c (? . 10) c (? . 20) c (u . "\n") c (? . 15) c "<h1>Cake Shop</h1>" c (u . "\n") c (? . 10) c (? . 16) c (u . "\n") c (? . 3) c (? . 16) c (u . "\n") c (? . 91) c (u . "\n") c (? . 17) c (u . "\n") c (? . 3) c "<nav class=\"small-12 medium-shrink xxlarge-2 col\">" c (u . "\n") c (? . 10) c "<ul class=\"block-grid medium-vertical\">" c (u . "\n") c (? . 15) c (? . 92) c (u . "\n") c (? . 15) c (? . 93) c (u . "\n") c (? . 15) c (? . 94) c (u . "\n") c (? . 15) c (? . 95) c (u . "\n") c (? . 10) c (? . 96) c (u . "\n") c (? . 3) c (? . 97) c (u . "\n") c (? . 3) c "<aside class=\"small-hidden large-shrink xxlarge-2 col\">" c (u . "\n") c (? . 10) c "<p>Sections</p>" c (u . "\n") c (? . 10) c (? . 98) c (u . "\n") c (? . 15) c "<li><strong>Section 1</strong>" c (u . "\n") c (? . 59) c (? . 98) c (u . "\n") c (? . 101) c "<li>Section 1.1</li>" c (u . "\n") c (? . 59) c (? . 99) c (u . "\n") c (? . 15) c "</li>" c (u . "\n") c (? . 15) c "<li>Section 2</li>" c (u . "\n") c (? . 15) c "<li>Section 3</li>" c (u . "\n") c (? . 10) c (? . 99) c (u . "\n") c (? . 3) c (? . 100) c (u . "\n") c (? . 3) c "<main class=\"small-12 medium-auto col\">" c (u . "\n") c (? . 10) c "<article>" c (u . "\n") c (? . 15) c "<h1>Main Heading of the article</h1>" c (u . "\n") c (? . 15) c "<p>Introducing of the essay goes here.</p>" c (u . "\n") c (? . 15) c "<h2>Section 1—Photos</h2>" c (u . "\n") c (? . 15) c "<p>You’ll find a couple of images in the following that shows the flexbox-based block-grid system.</p>" c (u . "\n") c (? . 15) c "<div class=\"block-grid small-up-to-2 medium-up-to-3\">" c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c (? . 105) c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c "<img src=\"http://placehold.it/350x300\" alt=\"placeholder image\" />" c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c "<img src=\"http://placehold.it/700x400\" alt=\"placeholder image\" />" c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c "<img src=\"http://placehold.it/500x300\" alt=\"placeholder image\" />" c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c "<img src=\"http://placehold.it/500x600\" alt=\"placeholder image\" />" c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c (? . 105) c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c (? . 105) c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 59) c (? . 102) c (u . "\n") c (? . 101) c (? . 105) c (u . "\n") c (? . 101) c (? . 103) c (u . "\n") c (? . 59) c (? . 104) c (u . "\n") c (? . 15) c (? . 16) c (u . "\n") c (? . 15) c "<h3>1.1 Sub section</h3>" c (u . "\n") c (? . 15) c "<p>This is a paragraph of section 1.1. It’s the sub-section that conclude the section 1.</p>" c (u . "\n") c (? . 15) c "<h2>2. Section 2</h2>" c (u . "\n") c (? . 15) c "<p>We create more sections. An essay usually contains more than 1 section. This is the reason we put section 2 here.</p>" c (u . "\n") c (? . 15) c "<h2>3. Summary</h2>" c (u . "\n") c (? . 15) c "<p>This section summerize the entire article.</p>" c (u . "\n") c (? . 10) c "</article>" c (u . "\n") c (? . 3) c (? . 40) c (u . "\n") c (? . 3) c "<div class=\"advertisement row\">" c (u . "\n") c (? . 10) c "<div class=\"small-hidden xlarge-shrink col\">" c (u . "\n") c (? . 15) c "<img src=\"http://placehold.it/160x600&text=ad.\" alt=\"Advertisement\" />" c (u . "\n") c (? . 10) c (? . 16) c (u . "\n") c (? . 3) c (? . 16) c (u . "\n") c (? . 16) c (u . "\n") c (? . 41) c (u . "\n") c (? . 3) c (? . 17) c (u . "\n") c (? . 10) c (? . 20) c (u . "\n") c (? . 15) c "CC0 Do anything license." c (u . "\n") c (? . 10) c (? . 16) c (u . "\n") c (? . 3) c (? . 16) c (u . "\n") c (? . 42))) c (c h2 c (c (c id c (u . "result-and-live-demo"))) c (c a c (c (c href c (u . "#result-and-live-demo"))) q "Result and live demo")) c (c p c (? . 106)) c (c div c (c (c class c (? . 23))) c (c figure c (c p c (c img c (c (c src c (? . 107)) c (c alt c (? . 24))))) c (c figcaption c (? . 24))) c (c figure c (c p c (c img c (c (c src c (? . 108)) c (c alt c (? . 25))))) c (c figcaption c (? . 25)))) c (c div c (c (c class c (? . 23))) c (c figure c (c p c (c img c (c (c src c (? . 109)) c (c alt c (? . 26))))) c (c figcaption c (? . 26))) c (c figure c (c p c (c img c (c (c src c (? . 88)) c (c alt c (? . 27))))) c (c figcaption c (? . 27)))) c (c figure c (c p c (c img c (c (c src c (? . 110)) c (c alt c (? . 28))))) c (c figcaption c (? . 28))) c (c p c (? . 111)) c (c p c (c (c data-height c (? . 112)) c (c data-slug-hash c (? . 29)) c (c data-theme-id c (? . 47)) c (c data-default-tab c (? . 48)) c (c data-user c (? . 49))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/GJjMEL"))) c (? . 50) c (? . 29)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-3/grid.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-1/center-align.html.pm" . unix) h ! (equal) (mod-time . 1432275072) (doc c root c (q h1 "Center align") c (q p "Center alignment is one of the most discussed topic in CSS. Flexbox provides a easy and elegant way to solve this layout issue.") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%202.24.06%20AM.png") c (c alt c (? . 113))))) c (c figcaption c (? . 113)))) c (c h2 c (c (c id c (u . "example—center-aligning-one-item"))) c (c a c (c (c href c (u . "#example—center-aligning-one-item"))) q "Example—Center aligning one item")) c (c pre c (c code c (c (c class c (? . 38))) c (? . 58) c (u . "\n") c (? . 3) c "<div class=\"item\">Center aligned.</div>" c (u . "\n") c (? . 16))) c (c pre c (c code c (c (c class c (? . 1))) c (? . 64) c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 4) c (u . "\n") c (? . 119) c (u . "\n") c (? . 3) c "margin: auto;" c (u . "\n") c (? . 4))) c (c p c "The beautify of " c (c code c (? . 115)) q " on the child items is that it automatically spread the items across the space with equivalent margins.") c (c h2 c (c (c id c (u . "example—distribute-multiple-items-in-container"))) c (c a c (c (c href c (u . "#example—distribute-multiple-items-in-container"))) q "Example—Distribute multiple items in container")) c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.06.47%20PM.png") c (c alt c (? . 114))))) c (c figcaption c (? . 114)))) c (c p c "Thanks to the " c (c code c (? . 115)) q ", the browser automatically distribute all the items inside the flexbox container equally.") c (c pre c (c code c (c (c class c (? . 38))) c (? . 58) c (u . "\n") c (? . 3) c (? . 116) c (u . "\n") c (? . 3) c (? . 116) c (u . "\n") c (? . 3) c (? . 116) c (u . "\n") c (? . 16))) c (c h2 c (c (c id c (u . "using-align-items-and-justify-content"))) c (c a c (c (c href c (u . "#using-align-items-and-justify-content"))) q "Using align-items and justify-content")) c (c p c "Alternatively, we can configure the alignment in the container by using the " c (c code c (? . 8)) c (? . 36) c (c code c (? . 7)) q " properties.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 64) c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 3) c (? . 117) c (u . "\n") c (? . 3) c (? . 118) c (u . "\n") c (? . 4) c (u . "\n") c (? . 119) c (u . "\n") c (? . 3) c "/* No need to specify the alignment in children */" c (u . "\n") c (? . 4))) c (c h2 c (c (c id c (u . "example—center-aligning-multiple-items"))) c (c a c (c (c href c (u . "#example—center-aligning-multiple-items"))) q "Example—Center aligning multiple items")) c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20flexbox.website/Screen%20Shot%202015-05-22%20at%201.05.34%20PM.png") c (c alt c (? . 120))))) c (c figcaption c (? . 120)))) c (q p "By using the container’s alignment options, we can center align multiple items together.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 121) c (u . "\n") c (? . 3) c "height: 100%" c (u . "\n") c (? . 4) c (u . "\n") c (? . 64) c (u . "\n") c (? . 3) c (? . 63) c (u . "\n") c (? . 3) c (? . 44) c (u . "\n\n") c (? . 3) c (? . 117) c (u . "\n") c (? . 3) c (? . 118) c (u . "\n\n") c (? . 3) c (? . 122) c (u . "\n") c (? . 4) c (u . "\n") c ".box {" c (u . "\n") c (? . 3) c "height: 50px;" c (u . "\n") c (? . 3) c "width: 300px;" c (u . "\n") c (? . 3) c "margin: 0.2em;" c (u . "\n") c (? . 4))) c (q p "You can find the live demo in the following link:") c (c p c (c (q data-height "368") c (c data-slug-hash c (? . 123)) c (c data-theme-id c (? . 47)) c (c data-default-tab c (? . 48)) c (c data-user c (? . 49))) c (c a c (c (c href c (u . "http://codepen.io/makzan/pen/dopZxX"))) c (? . 50) c (? . 123)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-1/center-align.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-2/floating-grid.html.pm" . unix) h ! (equal) (mod-time . 1432273136) (doc c root c (q h1 "Floating grid with Scss") c (q p "We have built a very basic grid system. There are many pattern-repeating code when defining the columns. We can use proprocessor to keep the code shorter for easier maintenance.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 135) c (u . "\n") c "$breakpoint: 800px;" c (u . "\n") c (? . 126) c (u . "\n") c (? . 3) c (? . 124) c (u . "\n") c (? . 10) c (? . 136) c (u . "\n") c (? . 15) c (? . 125) c (u . "\n") c (? . 10) c (? . 4) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4) c (u . "\n") c "@media screen and (min-width: $breakpoint) {" c (u . "\n") c (? . 3) c (? . 124) c (u . "\n") c (? . 10) c ".medium-#{$i} {" c (u . "\n") c (? . 15) c (? . 125) c (u . "\n") c (? . 10) c (? . 4) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4))) c (c div c (q h2 ((id "by-the-way")) (a ((href "#by-the-way")) "By the way")) c (q p "Just in case you use pure-CSS, here is the CSS version of the code.width") c (c pre c (c code c (c (c class c (? . 1))) c (? . 126) c (u . "\n") c (? . 3) c (? . 127) c (u . "\n") c (? . 10) c (? . 12) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 128) c (u . "\n") c (? . 10) c (? . 13) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 129) c (u . "\n") c (? . 10) c (? . 14) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 130) c (u . "\n") c (? . 10) c (? . 11) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4) c (u . "\n") c "@media screen and (min-width: 800px) {" c (u . "\n") c (? . 3) c (? . 131) c (u . "\n") c (? . 10) c (? . 12) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 132) c (u . "\n") c (? . 10) c (? . 13) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 133) c (u . "\n") c (? . 10) c (? . 14) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 134) c (u . "\n") c (? . 10) c (? . 11) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4)))) c (c h2 c (c (c id c (u . "using-runtime-calc"))) c (c a c (c (c href c (u . "#using-runtime-calc"))) q "Using runtime calc")) c (q p "Preprocessor calculate the column’s width for us. Alternatively, we can use the " (code "calc") " to define forumla and let browser calculates the value at runtime. The following is a variant of our code that uses calc and performs the same behaviors in browser.") c (c pre c (c code c (c (c class c (? . 1))) c (? . 135) c (u . "\n") c (? . 126) c (u . "\n") c (? . 3) c (? . 124) c (u . "\n") c (? . 10) c (? . 136) c (u . "\n") c (? . 15) c "width: calc( 100% / #{$columns-count} * #{$i} );" c (u . "\n") c (? . 10) c (? . 4) c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4))) c (q p "The CSS version:") c (c pre c (c code c (c (c class c (? . 1))) c (? . 126) c (u . "\n") c (? . 3) c (? . 127) c (u . "\n") c (? . 10) c "width: calc( 100% / 4 * 1 );" c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 128) c (u . "\n") c (? . 10) c "width: calc( 100% / 4 * 2 );" c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 129) c (u . "\n") c (? . 10) c "width: calc( 100% / 4 * 3 );" c (u . "\n") c (? . 3) c (? . 4) c (u . "\n\n") c (? . 3) c (? . 130) c (u . "\n") c (? . 10) c "width: calc( 100% / 4 * 4 );" c (u . "\n") c (? . 3) c (? . 4) c (u . "\n") c (? . 4)))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-2/floating-grid.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/log.html.pm" . unix) h ! (equal) (mod-time . 1432258482) (doc c root c (q h1 "log") c (c p c (c li c (q strong "2015-05-22") c (? . 33) q "First draft written for WIDS2015."))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/log.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/summary.html.pm" . unix) h ! (equal) (mod-time . 1432273523) (doc c root c (c h1 c (? . 137)) c (q p "After going through this short introduction, you should have more understandings on how we can make use of Flexbox when building website. It provides a very simple way to archive some layouts that was difficult to implement.") c (c h2 c (c (c id c (u . "useful-resources"))) c (c a c (c (c href c (u . "#useful-resources"))) q "Useful resources")) q (p "When you’re applying the flexbox in real projects, you’ll most likely encounter new issues and feel confused. The following list contains several links for you to further explore Flebox.") (ul (li (a ((href "https://css-tricks.com/snippets/css/a-guide-to-flexbox/")) "CSS-Trick’s complete guide to Flexbox")) (li (a ((href "https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes")) "MDN’s guide on using Flexbox")) (li (a ((href "http://makzan.net/web-design-scrapbook/learning-flexbox/")) "My cheatsheet on Flexbox alignment")) (li (a ((href "https://github.com/philipwalton/flexbugs")) "Known borwser issues on implementing flexbox")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/summary.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/index.html.pm" . unix) h ! (equal) (mod-time . 1432274710) (doc c root c (c h1 c (? . 138)) c (c p c "Welcome to the workshop. I’m " c (c em c (? . 139)) q ". You may find these workshop slides at " (a ((href "http://flexbox.website")) "Flexbox.website") ". Make sure you have the latest modern browsers and your favorite code editor ready.") c (c ol c (c li c (c a c (q (href "./about-makzan.html")) c (? . 140))) q (li (a ((href "./contact.html")) "Contact")) (li (a ((href "./preparing.html")) "Preparing")))) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/index.html.pm"))) ((p+ #"/home/ubuntu/workspace/pollen-src/chapter-0/preparing.html.pm" . unix) h ! (equal) (mod-time . 1432354736) (doc c root c (q h1 "Preparing for the workshop") c (q p "You’ll need to bring your laptop with a modern browser and your favorite code editor installed. During the workshop, there are several code demos. I put both the code into the page and on Codepen is live demo. You can find those live demos in the following Codpen collection. Please fork them and play around the code yourself. You won’t learn it until you hack it.") c (q p (a ((href "http://codepen.io/collection/XdbWMW/")) "Code examples on CodePen")) c (c h2 c (c (c id c (u . "-prefix-free-library"))) c (c a c (c (c href c (u . "#-prefix-free-library"))) q "-prefix-free library")) c (q p (a ((href "http://leaverou.github.io/prefixfree/")) "-prefix-free") " is the JS library made by " (a ((href "http://lea.verou.me/")) "Lea Verou") ". It parses the CSS properties and apply centain vendor prefixes on the rules by determing the browser version. This library allows us to skip worrying about different syntaxes—prefixes and the old syntaxes.") c (c h2 c (c (c id c (u . "preprocessor"))) c (c a c (c (c href c (u . "#preprocessor"))) q "Preprocessor")) q (p "The logic in CSS preprocessor provides us the DRY—Don’t repeat yourself— way to write the CSS code. We will use some SCSS code when defining the grid layout. It’s loop and list feature helps reducing the lines of code a lot. If you are using other preprocessor, you may find their equivalents in " (a ((href "http://csspre.com")) "CSSPre.com") ". If you aren’t using any preprocessor, no worry, we also provide the full CSS code.")) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/chapter-0/preparing.html.pm")))))